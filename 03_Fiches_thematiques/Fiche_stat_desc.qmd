# Réaliser des tableaux de statistiques descriptives {#statdesc}

## Tâches concernées et recommandations

Dans cette fiche, on suppose que le besoin de l'utilisateur est de passer d'une table à un tableau de statistiques descriptives prêt à être analysé. Bien souvent, en amont, l'utilisateur a dû réaliser des manipulations sur une ou plusieurs tables (jointures, créations de variables, etc.) pour construire les variables "prêtes à l'emploi", mais ces opérations ne font pas partie du spectre de cette fiche. De même, en aval, les questions de pure customisation de mise en forme de tableaux ou de réalisation de graphiques ne font pas l'objet de cette fiche.

::: {.callout-note}

- Ce sujet - la fabrication de tableaux - est au coeur des activités d'un chargé d'études travaillant à l'Insee ou en SSM, qui seront peut-être plus particulièrement concernés par cette fiche.

- Contrairement à Sas qui proposait la proc tabulate par exemple, R ne propose pas de procédure "de référence" pour construire un tableau de statistiques descriptives. En outre, même parmi les statisticiens qui n'utilisent pas ou plus Sas, beaucoup ont pour habitude d'avoir une première étape de constitution de résultats en R, puis une seconde étape de retravail de tableaux directement via un tableur de type Excel ou Calc (avec des tableaux croisés dynamiques). Pourtant, internaliser la production de tableaux de synthèse dans sa chaîne de traitements comprend de nombreux avantages, parmi lesquels l'automatisation de tâches de mise en forme, la reproductibilité des analyses, ou encore l'intégration directe du tableau à un rapport.

- En réalité, R offre de nombreuses possibilités pour internaliser l'ensemble des étapes de réalisation d'un tableau de statistiques descriptives, pas toujours connues. Ainsi, de nombreux packages de statistiques descriptives ont été développés, souvent pour répondre à des besoins métiers spécifiques, et chacun présentant donc des avantages et des inconvénients. Il est nécessaire de maintenir une veille régulière sur ce sujet, des solutions satisfaisantes pouvant faire jour à tout moment.

- Les fiches [Manipuler des données avec le `tidyverse`](#tidyverse) et [Faire des graphiques avec `ggplot2`](#ggplot2) sont complémentaires de la présente fiche.

:::

## Savoir poser son problème

## Syntaxes courantes

### R de base

### dplyr

### data.table

### Des avantages et des inconvénients

## Packages dédiés

### Tableau de synthèse

### Exemples reproductibles

## Le package `tabloid`, une solution maison pour l'Insee

### Tableau de synthèse

### Exemple reproductible


<!-- ### Quels sont les avantages d'`arrow`? -->

<!-- En pratique, le *package* `arrow` présente trois avantages: -->

<!-- -   **Performances élevées**: `arrow` est très efficace et très rapide pour la manipulation de données tabulaires (nettement plus performant que `dplyr` par exemple); -->
<!-- -   **Usage réduit des ressources**: `arrow` est conçu pour ne charger en mémoire que le minimum de données. Cela permet de réduire considérablement les besoins en mémoire, même lorsque les données sont volumineuses; -->
<!-- -   **Facilité d'apprentissage** grâce aux approches `dplyr` et SQL: `arrow` peut être utilisé avec les verbes de `dplyr` (`select`, `mutate`, etc.) et/ou avec le langage SQL grâce à `duckdb`. Par conséquent, il n'est pas nécessaire d'apprendre une nouvelle syntaxe pour utiliser `arrow`, on peut s'appuyer sur la ou les approches que l'on maîtrise déjà. En revanche, il est à noter que le _package_ `data.table` n'est pas directement compatible avec `arrow` (il faut convertir les objets `Arrow Table` en `data.table`, opération longue lorsque les données sont volumineuses). -->

<!-- ## Que faut-il savoir pour utiliser `arrow`? -->

<!-- Le _package_ `arrow` présente quatre caractéristiques importantes: -->

<!-- - une structure de données spécifique: le `Arrow Table`; -->
<!-- - une utilisation via la syntaxe `dplyr`; -->
<!-- - un moteur d'exécution spécifique: `acero`; -->
<!-- - un mode de fonctionnement particulier: l'évaluation différée. -->

<!-- ### Charger et paramétrer le *package* `arrow` -->

<!-- Pour utiliser `arrow`, il faut commencer par charger le *package*. Comme `arrow` s'utilise presque toujours avec `dplyr` en pratique, il est préférable de prendre l'habitude de charger les deux *packages* ensemble. Par ailleurs, il est utile de définir systématiquement deux réglages qui sont importants pour les performances d'`arrow`: autoriser `arrow` à utiliser plusieurs processeurs en parallèle, et définir le nombre de processeurs qu'`arrow` peut utiliser. -->

<!-- ```{r} -->
<!-- #| output: false -->
<!-- library(arrow) -->
<!-- library(dplyr) -->

<!-- # Autoriser arrow à utiliser plusieurs processeurs en parallèle -->
<!-- options(arrow.use_threads = TRUE) -->
<!-- # Définir le nombre de processeurs qu'arrow peut utiliser -->
<!-- arrow::set_cpu_count(parallel::detectCores() %/% 4) -->
<!-- ``` -->

<!-- ## Pour en savoir plus {#RessourcesArrow} -->

<!-- - la documentation officielle du _package_ [`arrow`](https://arrow.apache.org/docs/dev/r/index.html) (en anglais); -->
<!-- - [un post de blog qui décrit en détail les liens entre `libarrow` et `R`](https://blog.djnavarro.net/posts/2022-01-18_binding-arrow-to-r/) (en anglais); -->
<!-- - la [liste](https://arrow.apache.org/docs/dev/r/reference/acero.html) des fonctions du _tidyverse_ supportées par `acero`. -->

